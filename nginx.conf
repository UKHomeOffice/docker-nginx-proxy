include /usr/local/openresty/nginx/conf/error_logging.conf;

http {
    include /usr/local/openresty/naxsi/*.rules;

    resolver 127.0.0.1:5462;

    include /usr/local/openresty/nginx/conf/nginx_rate_limits*.conf;
    include mime.types;
    default_type application/octet-stream;

    # Compression

    # Enable Gzip compressed.
    gzip on;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
      application/atom+xml
      application/javascript
      application/json
      application/ld+json
      application/manifest+json
      application/rss+xml
      application/vnd.geo+json
      application/vnd.ms-fontobject
      application/x-font-ttf
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      font/opentype
      image/bmp
      image/svg+xml
      image/x-icon
      text/cache-manifest
      text/css
      text/plain
      text/vcard
      text/vnd.rim.location.xloc
      text/vtt
      text/x-component
      text/x-cross-domain-policy;
    # text/html is always compressed by HttpGzipModule

    include /usr/local/openresty/nginx/conf/logging.conf;
    include /usr/local/openresty/nginx/conf/upload_size*.conf;
    include /usr/local/openresty/nginx/conf/nginx_http_extras*.conf;

    # config to not allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    add_header X-Frame-Options SAMEORIGIN;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

  # Accept underscores in headers as NAXSI does this
  underscores_in_headers on;

  server {
        # Optionally listen to proxy protocol:
        include  /usr/local/openresty/nginx/conf/nginx_listen.conf;

        # These should be volume added:
        include /usr/local/openresty/nginx/conf/server_certs.conf;

        # Set the correct host name from the request header...
        server_name $host;
        # Dont publish the version we are running
        server_tokens off;

        if ($ssl_protocol = "") {
          rewrite ^ https://$host$request_uri? permanent;
        }

        # Will set $country_code variables:
        set $country_code '??';

        include /usr/local/openresty/nginx/conf/nginx_server_extras*.conf ;

        set $uuid $request_id;

        location /nginx-proxy/ {
            alias /usr/local/openresty/nginx/html/;
            ssi on;
            error_page 404 /nginx-proxy/404.shtml;
            allow all;
        }
        location /ping {
            return 200;
        }

        location /RequestDenied {
            return 418; # Return a 418 (Teapot) status
        }

        include /usr/local/openresty/nginx/conf/locations/*.conf ;
    }

    server {
        listen 10088;
        location /nginx_status {
            stub_status on;
            access_log   off;
            allow 127.0.0.1;
            allow 172.17.0.1;
            deny all;
        }
    }
}
events {
}
