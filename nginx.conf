error_log /dev/stdout debug;

env LOG_UUID;

http {

    # get CN
    map $ssl_client_s_dn $ssl_client_s_dn_cn {
        default "should_not_happen";
        ~/CN=(?<CN>[^/]+) $CN;
    }

    include  /usr/local/openresty/naxsi/*.rules;
    include /usr/local/openresty/nginx/conf/resolver.conf;

    lua_package_path 'conf/?.lua;;';

    # Sample logging format that supports
    log_format logging '$real_client_ip_if_set$remote_addr - $remote_user [$time_local] '
                          '"$request"$uuid_log_opt $status $bytes_sent '
                          '"$http_referer" "$http_user_agent" "$gzip_ratio" '
                          '$ssl_client_verify '
                          '"$ssl_client_s_dn" ';

    access_log /dev/stdout logging;

    server {

        # Optionally listen to proxy protocol:
        include  /usr/local/openresty/nginx/conf/nginx_listen.conf ;

        # These should be volume added:
        ssl_certificate     /etc/keys/crt;
        ssl_certificate_key /etc/keys/key;

        # Optionally include client cert config:
        include /usr/local/openresty/nginx/conf/client_certs*.conf ;

        server_name proxy;

        set $uuid_log_opt '';
        # Generate a unique ID for use in logs for passing onto applications
        set_by_lua_file $uuidopt /usr/local/openresty/nginx/lua/set_uuid.lua;

        location /50x.html {
            root /usr/local/openresty/nginx/html;
            allow all;
            internal;
        }

        location /ping {
            return 200;
        }

        location /RequestDenied {
            return 418;
        }

        include /usr/local/openresty/nginx/conf/locations/*.conf ;
    }
}
events {
}
